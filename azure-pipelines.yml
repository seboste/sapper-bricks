# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pr:
- main

pool:
  vmImage: ubuntu-latest

parameters:
- name: bricks
  type: object
  default:
    - handler-httplib
    - handler-grpc
    - repo-in-memory
    - observability-structured-logging

steps:
- task: GoTool@0
  inputs:
    version: '1.20.1'
- script: |
    echo machine github.com login seboste password $(GIT_SAPPER_TOKEN) > ~/.netrc
    export GOBIN=/usr/local/bin/
    go env -w GOPRIVATE=github.com/seboste/*
    go install github.com/seboste/sapper@latest
    sapper remote add current $PWD --insert=0
    sapper remote remove sapper-bricks
  displayName: 'install & configure sapper'
- script: |
    pip install conan==1.59.0
    conan profile new default --detect
    conan profile update settings.compiler.libcxx=libstdc++11 default
  displayName: install conan
- script: |
    git clone https://github.com/seboste/microservice-essentials.git $(Agent.TempDirectory)/mse    
    conan create $(Agent.TempDirectory)/mse
  displayName: obtain microservices essentials lib
- ${{ each brick in parameters.bricks }}:
  - script: |
      mkdir -p $(Agent.TempDirectory)/services
      sapper service add $(Agent.TempDirectory)/services/${{ brick }}-service -p VERSION=1.0.0
      if [ $? -ne 0 ]; then
        exit 1
      fi
      sapper brick add ${{ brick }} --service $(Agent.TempDirectory)/services/${{ brick }}-service
      if [ $? -ne 0 ]; then
        exit 1
      fi
      sapper service build $(Agent.TempDirectory)/services/${{ brick }}-service
      if [ $? -ne 0 ]; then
        exit 1
      fi
      rm -rf $(Agent.TempDirectory)/services/${{ brick }}-service/build/src
    displayName: 'test ${{ brick }}-service'
  - script: |
      mkdir -p $(Agent.TempDirectory)/build_logs/${{ brick }}-service
      mv /tmp/sapper_build_log_*.log $(Agent.TempDirectory)/build_logs/${{ brick }}-service || true
    displayName: 'copy build logs ${{ brick }}-service'
    condition: always()
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Agent.TempDirectory)/build_logs'
    artifactType: 'pipeline'
    artifactName: 'build_logs'
  displayName: 'publish build logs'
  condition: always()
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Agent.TempDirectory)/services'
    artifactType: 'pipeline'
    artifactName: 'services'
  displayName: 'publish services'
  condition: always()